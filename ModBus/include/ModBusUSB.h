#ifndef __MODBUSUSB_H
#define __MODBUSUSB_H
//---------------------------------------------------------------------------

#include <libusb/include/libusb-1.0/libusb.h>
#include <stdlib.h>
#include <stdint.h>
#include <malloc.h>
#include <string.h>
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//                              Типы данныйх
//---------------------------------------------------------------------------
//====================================================
#define MAX_COUNT_ADC   100000

typedef struct
{
  uint16_t  vid; //идентификатор производителя
  uint16_t  pid; //идентификатор устройства
  uint8_t   ep_in;
  uint8_t   ep_out;
  uint32_t  timeOut; // Максимальное время прихода нового пакет
  uint32_t  adc_count;
  uint8_t   adc_freq;
  uint32_t  adc_channels;
}
TConfigUSBPort;

//====================================================
//====================================================

typedef struct
{
  libusb_device*          devpnt; // Указатель на usb устройства
  libusb_device_handle*	  device_handle; // Указатель на дискриптор устройства

  uint16_t  bcdDevice;		// Номер версии устройства в двоично-десятичном виде
                          // 1- Байт версия soft
                                    // 2- Байт версия hard
  uint8_t   iManufacturer;  // индекс строки описывающий производителя
  uint8_t   iProduct;       // индекс строки описывающий продукт.
  uint8_t   iSerialNumder;	// индекс строки описывающий серийный номер устройства
}
TUsbData;

typedef struct
{
        uint32_t    adc_channels;   // ????? ?????? ???
        uint32_t    adc_count;      // ?????????? ?????
        uint16_t    adc_freq;       // ??????? ????????????
        uint16_t    adc_buff[MAX_COUNT_ADC];     // ????? ?????? 16 ???
}
TADC_Data;

//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//                              Прототипы функций
//---------------------------------------------------------------------------
bool   OpenPort(TConfigUSBPort * AConfigUSBPort);  //  Функция открывает и настраивает последовательный порт "COM".
void   ClosePort(void);                        //  Функция закрывает последовательный порт "COM".
//---------------------------------------------------------------------------
//                    Функции транспортного уровня ModBusRTU
//---------------------------------------------------------------------------
int  TransmitFrameControl(uint8_t * data_buff, uint32_t length, uint32_t waite); //  Функция  отправляет пакет данных в последовательный порт "COM".
int  ReseiveFrameControl (uint8_t * data_buff, uint32_t length, uint32_t waite);  //  Функция  принимает пакет данных из последовательного порта "COM"
int  ReseiveFrameData    (uint8_t * data_buff, uint32_t length, uint32_t waite);  //  Функция  принимает пакет данных из последовательного порта "COM"

//---------------------------------------------------------------------------
//
//---------------------------------------------------------------------------
int32_t   SetFreqSampleADC(uint8_t freq);   // Функция производит установку частоты выборки выбранного АЦП.

int32_t   SetCountSampleADC(uint32_t count_adc); // Функция производит установку счетчика АЦП.

int32_t   SetEnableChannelADC(uint32_t enable);  //Функция производит запись в регистр разрешения работы каналов АЦП

int32_t   ReadDataADC(uint32_t size_reg, uint8_t num_adc, uint16_t *buff_data);  // Функция производит чтение данных после выполнения команды  № 65 START SAMPLE ADC

int32_t   StartSampleADC(uint32_t wait);       // Функция запускает сканирование АЦП
//------------------------------------------------------------------------------
//                        Макросы для работы с байтами
//------------------------------------------------------------------------------
#define HI(x) ((x)>>8)
#define LO(x) ((x)& 0xFF)

//------------------------------------------------------------------------------
//                              Коды ошибок
//------------------------------------------------------------------------------
#define ERROO_CONNECT_PORT                -10   //  Нет соединения с портом
#define ERROR_TRANSMIT                    -12   //  Ошибка при отправке пакета
#define ERROR_RECEIVE                     -14   //  Ошибка при отправке пакета
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#endif // __MODBUSUSB_H
